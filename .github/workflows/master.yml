name: CI/CD

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.x ]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install dependencies
        run: npm install

      - name: Lint code for errors
        run: npm run lint

      - name: Check types
        run: npm run typecheck

      - name: Get test coverage
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          yml: codecov.yml
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.x ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v1

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Install dependencies
        run: npm install

      - name: Generate merged types
        run: npm run types:merge

      - name: Update Apollo Studio types
        run: npx apollo service:push --graph=Neurobranch --key=$APOLLO_STUDIO_KEY --variant=current --localSchemaFile=./apps/core/src/assets/schema.graphql
        env:
          APOLLO_STUDIO_KEY: ${{ secrets.APOLLO_STUDIO_KEY }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-west-1

      - name: Bump version
        uses: 'phips28/gh-action-bump-version@master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          commit-message: 'Release: bump version to {{version}} [skip ci]'

      - name: Build and push image to ECR
        run: |
          TAG=$ECR_SECRET/neurobranch-core:latest &&
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $ECR_SECRET &&
          docker build --file=apps/core/Dockerfile --tag=$TAG --no-cache . &&
          docker push $TAG
        env:
          ECR_SECRET: ${{ secrets.ECR_SECRET }}

      - name: Run migrations
        run: npm run migrate:up

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.x ]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v1

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: Configure SSH keys
        run: |
          which ssh-agent || ( apt-get install -qq openssh-client ) &&
          eval $(ssh-agent -s) &&
          mkdir -p ~/.ssh &&
          echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config &&
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa &&
          echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub &&
          chmod 400 ~/.ssh/id_rsa &&
          chmod 400 ~/.ssh/id_rsa.pub &&
          ssh-add ~/.ssh/id_rsa
        env:
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-west-1

      - name: Deploy apps to Dokku
        run: |
          ssh -tt root@syzible.com "\
          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $ECR_SECRET && \
          docker pull $ECR_SECRET/neurobranch-core:latest && \
          docker tag $ECR_SECRET/neurobranch-core dokku/neurobranch-core:latest && \
          dokku tags:deploy neurobranch-core latest"
        env:
          ECR_SECRET: ${{ secrets.ECR_SECRET }}
