scalar DateTime
scalar Cursor

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

union Actor = Candidate | Researcher

type Audit {
  id: ID!
  action: String!
  performedAt: DateTime!
  performedBy: Actor! # TODO move to own resolver
}

type AuditEdge {
  node: Audit
  cursor: Cursor!
}

type AuditConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [AuditEdge]!
}

type Candidate {
  id: ID!
  createdAt: DateTime!
  deletedAt: DateTime
  verifiedAt: DateTime
  auditLog: AuditConnection # TODO move to own resolver
  name: String!
  username: String!
  email: String!
}

type CandidateEdge {
  node: Candidate
  cursor: Cursor!
}

type CandidateConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [CandidateEdge]!
}

type Researcher {
  id: ID!
  auditLog: AuditConnection
  createdAt: DateTime!
  deletedAt: DateTime
  verifiedAt: DateTime
  name: String!
  username: String!
  email: String!
}

type ResearcherEdge {
  node: Trial
  cursor: Cursor!
}

type ResearcherConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ResearcherEdge]!
}

enum Frequency {
  DAILY
  WEEKLY
  FORTNIGHTLY
  MONTHLY
}

type Trial {
  id: ID!
  createdAt: DateTime!
  deletedAt: DateTime
  title: String!
  synopsis: String!
  description: String!
  tags: [String!]!
  startTime: DateTime!
  endTime: DateTime!
  frequency: Frequency!
  auditLog: AuditConnection # TODO move to own resolver
  lead: Researcher!
  researchers: ResearcherConnection # TODO move to own resolver
  participants: CandidateConnection # TODO move to own resolver
}

type TrialEdge {
  node: Trial
  cursor: Cursor!
}

type TrialConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TrialEdge]!
}

enum QuestionType {
  RADIO
  CHECKBOX
  SCALE
  TEXT
}

type Question {
  id: ID!
  title: String!
  type: QuestionType!
  choices: [Choice!]! # TODO move to own resolver
  trial: Trial! # TODO move to own resolver
}

type Choice {
  id: ID!
  index: Int!
  skippable: Boolean!
}

type ResponseEdge {
  node: Response
  cursor: Cursor!
}

type ResponseConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ResponseEdge]!
}

union Response = RadioResponse | CheckboxResponse | ScaleResponse | TextResponse

type RadioResponse {
  id: ID!
  type: QuestionType!
  respondent: Candidate! # TODO move to own resolver
  choices: [Choice!]! # TODO move to own resolver
  response: Choice! # TODO move to own resolver
}

type CheckboxResponse {
  id: ID!
  type: QuestionType!
  respondent: Candidate! # TODO move to own resolver
  choices: [Choice!]! # TODO move to own resolver
  responses: [Choice!]! # TODO move to own resolver
}

type TextResponse {
  id: ID!
  type: QuestionType!
  respondent: Candidate! # TODO move to own resolver
  response: String!
}

type ScaleResponse {
  id: ID!
  type: QuestionType!
  respondent: Candidate! # TODO move to own resolver
  response: Float!
}

input ResearcherInput {
  name: String!
  dateOfBirth: String!
  email: String!
  username: String!
}

input CandidateInput {
  name: String!
  dateOfBirth: String!
  email: String!
  username: String!
}

type Query {
  getTrial(trialId: String!): Trial
  getTrials(first: Int, after: Cursor): TrialConnection
}

type Mutation {
  createResearcherAccount(input: ResearcherInput): Researcher
  createCandidateAccount(input: CandidateInput): Candidate
}
