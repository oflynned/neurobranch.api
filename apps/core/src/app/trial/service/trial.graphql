extend type Query {
  getEligibleTrials(pagination: PaginationArgs): TrialConnection
  getTrial(trialId: String!): Trial
}

extend type Mutation {
  createTrial(input: CreateTrialInput): Trial
}

enum Epoch {
  HOURS
  DAYS
  WEEKS
  MONTHS
}

type TriggerTime {
  hour: Int!
  minute: Int!
}

type TriggerFrequency {
  count: Int!
  unit: Epoch!
}

type Factor {
  condition: [String!]
}

type Criteria {
  inclusion: Factor
  exclusion: Factor
}

type Trial {
  id: ID!
  createdAt: Timestamp!
  lastUpdatedAt: Timestamp
  deletedAt: Timestamp
  auditLog: AuditConnection
  criteria: Criteria
  lead: Investigator
  investigators(pagination: PaginationArgs): InvestigatorConnection
  participants(pagination: PaginationArgs): ParticipantConnection

  minimumParticipantCount: Int
  state: TrialState
  title: String
  synopsis: String
  description: String
  tags: [String!]
  startTime: Timestamp
  endTime: Timestamp
  triggerTime: TriggerTime
  triggerFrequency: TriggerFrequency
  questions(pagination: PaginationArgs): QuestionConnection
}

enum TrialState {
  DRAFT
  PUBLISHED
  ENLISTING
  STARTABLE
  ONGOING
  DONE
  ARCHIVED
  CANCELLED
}

type TrialEdge {
  node: Trial
  cursor: Cursor!
}

type TrialConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [TrialEdge]!
}

input CreateTrialInput {
  startTime: Timestamp!
  duration: Int!
  title: String!
  synopsis: String!
  description: String!
  tags: [String!]!
  teamId: String!
}
